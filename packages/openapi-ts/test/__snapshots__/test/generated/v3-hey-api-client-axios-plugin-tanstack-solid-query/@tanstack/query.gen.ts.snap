// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import { queryOptions, type MutationOptions, type DefaultError, infiniteQueryOptions, type InfiniteData } from '@tanstack/solid-query';
import { export_, import_, apiVVersionOdataControllerCount, getCallWithoutParametersAndResponse, putCallWithoutParametersAndResponse, postCallWithoutParametersAndResponse, deleteCallWithoutParametersAndResponse, patchCallWithoutParametersAndResponse, deleteFoo, callWithDescriptions, deprecatedCall, callWithParameters, callWithWeirdParameterNames, getCallWithOptionalParam, postCallWithOptionalParam, postApiVbyApiVersionRequestBody, postApiVbyApiVersionFormData, callWithDefaultParameters, callWithDefaultOptionalParameters, callToTestOrderOfParams, duplicateName, duplicateName1, duplicateName2, duplicateName3, callWithNoContentResponse, callWithResponseAndNoContentResponse, dummyA, dummyB, callWithResponse, callWithDuplicateResponses, callWithResponses, collectionFormat, types, uploadFile, fileResponse, complexTypes, multipartRequest, multipartResponse, complexParams, callWithResultFromHeader, testErrorCode, nonAsciiæøåÆøÅöôêÊ字符串, putWithFormUrlEncoded } from '../services.gen';
import type { ImportData, ImportError, ImportResponse, DeleteFooData3, CallWithDescriptionsData, DeprecatedCallData, CallWithParametersData, CallWithWeirdParameterNamesData, GetCallWithOptionalParamData, PostCallWithOptionalParamData, PostCallWithOptionalParamError, PostCallWithOptionalParamResponse, PostApiVbyApiVersionRequestBodyData, PostApiVbyApiVersionFormDataData, CallWithDefaultParametersData, CallWithDefaultOptionalParametersData, CallToTestOrderOfParamsData, CallWithDuplicateResponsesError, CallWithDuplicateResponsesResponse, CallWithResponsesError, CallWithResponsesResponse, CollectionFormatData, TypesData, UploadFileData, UploadFileError, UploadFileResponse, FileResponseData, ComplexTypesData, MultipartRequestData, ComplexParamsError, ComplexParamsData, ComplexParamsResponse, CallWithResultFromHeaderError, CallWithResultFromHeaderResponse, TestErrorCodeData, TestErrorCodeError, TestErrorCodeResponse, NonAsciiæøåÆøÅöôêÊ字符串Data, NonAsciiæøåÆøÅöôêÊ字符串Error, NonAsciiæøåÆøÅöôêÊ字符串Response, PutWithFormUrlEncodedData } from '../types.gen';

type QueryKey = [
    {
        infinite?: boolean;
        params: {
            body?: any;
            headers?: any;
            path?: any;
            query?: any;
        };
        scope: string;
    }
];

const createQueryKeyParams = <T>(options?: Options<T>) => {
    const params: QueryKey[0]["params"] = {};
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const exportOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await export_({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'export'
        }
    ]
}); };

export const importOptions = (options: Options<ImportData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await import_({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'import'
        }
    ]
}); };

export const importMutation: MutationOptions<ImportResponse, ImportError, Options<ImportData>> = {
    mutationFn: async (options) => {
        const { data } = await import_({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const apiVVersionOdataControllerCountOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await apiVVersionOdataControllerCount({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'apiVVersionOdataControllerCount'
        }
    ]
}); };

export const getCallWithoutParametersAndResponseOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getCallWithoutParametersAndResponse({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'getCallWithoutParametersAndResponse'
        }
    ]
}); };

export const putCallWithoutParametersAndResponseMutation: MutationOptions<void, DefaultError, Options> = {
    mutationFn: async (options) => {
        const { data } = await putCallWithoutParametersAndResponse({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const postCallWithoutParametersAndResponseOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await postCallWithoutParametersAndResponse({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'postCallWithoutParametersAndResponse'
        }
    ]
}); };

export const postCallWithoutParametersAndResponseMutation: MutationOptions<void, DefaultError, Options> = {
    mutationFn: async (options) => {
        const { data } = await postCallWithoutParametersAndResponse({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const deleteCallWithoutParametersAndResponseMutation: MutationOptions<void, DefaultError, Options> = {
    mutationFn: async (options) => {
        const { data } = await deleteCallWithoutParametersAndResponse({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const patchCallWithoutParametersAndResponseMutation: MutationOptions<void, DefaultError, Options> = {
    mutationFn: async (options) => {
        const { data } = await patchCallWithoutParametersAndResponse({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const deleteFooMutation: MutationOptions<void, DefaultError, Options<DeleteFooData3>> = {
    mutationFn: async (options) => {
        const { data } = await deleteFoo({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const callWithDescriptionsOptions = (options?: Options<CallWithDescriptionsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithDescriptions({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'callWithDescriptions'
        }
    ]
}); };

export const callWithDescriptionsMutation: MutationOptions<void, DefaultError, Options<CallWithDescriptionsData>> = {
    mutationFn: async (options) => {
        const { data } = await callWithDescriptions({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const deprecatedCallOptions = (options: Options<DeprecatedCallData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await deprecatedCall({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'deprecatedCall'
        }
    ]
}); };

export const deprecatedCallMutation: MutationOptions<void, DefaultError, Options<DeprecatedCallData>> = {
    mutationFn: async (options) => {
        const { data } = await deprecatedCall({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const callWithParametersOptions = (options: Options<CallWithParametersData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithParameters({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'callWithParameters'
        }
    ]
}); };

export const callWithParametersInfiniteOptions = (options: Options<CallWithParametersData>) => { return infiniteQueryOptions<void, DefaultError, InfiniteData<void>, QueryKey, unknown>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        const { data } = await callWithParameters({
            ...options,
            ...queryKey[0].params,
            query: {
                ...queryKey[0].params.query,
                cursor: pageParam
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            infinite: true,
            params: createQueryKeyParams(options),
            scope: 'callWithParameters'
        }
    ]
}); };

export const callWithParametersMutation: MutationOptions<void, DefaultError, Options<CallWithParametersData>> = {
    mutationFn: async (options) => {
        const { data } = await callWithParameters({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const callWithWeirdParameterNamesOptions = (options: Options<CallWithWeirdParameterNamesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithWeirdParameterNames({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'callWithWeirdParameterNames'
        }
    ]
}); };

export const callWithWeirdParameterNamesMutation: MutationOptions<void, DefaultError, Options<CallWithWeirdParameterNamesData>> = {
    mutationFn: async (options) => {
        const { data } = await callWithWeirdParameterNames({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const getCallWithOptionalParamOptions = (options: Options<GetCallWithOptionalParamData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getCallWithOptionalParam({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'getCallWithOptionalParam'
        }
    ]
}); };

export const getCallWithOptionalParamInfiniteOptions = (options: Options<GetCallWithOptionalParamData>) => { return infiniteQueryOptions<void, DefaultError, InfiniteData<void>, QueryKey, unknown>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        const { data } = await getCallWithOptionalParam({
            ...options,
            ...queryKey[0].params,
            query: {
                ...queryKey[0].params.query,
                page: pageParam
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            infinite: true,
            params: createQueryKeyParams(options),
            scope: 'getCallWithOptionalParam'
        }
    ]
}); };

export const postCallWithOptionalParamOptions = (options: Options<PostCallWithOptionalParamData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await postCallWithOptionalParam({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'postCallWithOptionalParam'
        }
    ]
}); };

export const postCallWithOptionalParamInfiniteOptions = (options: Options<PostCallWithOptionalParamData>) => { return infiniteQueryOptions<PostCallWithOptionalParamResponse, PostCallWithOptionalParamError, InfiniteData<PostCallWithOptionalParamResponse>, QueryKey, unknown>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        const { data } = await postCallWithOptionalParam({
            ...options,
            ...queryKey[0].params,
            body: {
                ...queryKey[0].params.body,
                offset: pageParam
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            infinite: true,
            params: createQueryKeyParams(options),
            scope: 'postCallWithOptionalParam'
        }
    ]
}); };

export const postCallWithOptionalParamMutation: MutationOptions<PostCallWithOptionalParamResponse, PostCallWithOptionalParamError, Options<PostCallWithOptionalParamData>> = {
    mutationFn: async (options) => {
        const { data } = await postCallWithOptionalParam({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const postApiVbyApiVersionRequestBodyOptions = (options?: Options<PostApiVbyApiVersionRequestBodyData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await postApiVbyApiVersionRequestBody({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'postApiVbyApiVersionRequestBody'
        }
    ]
}); };

export const postApiVbyApiVersionRequestBodyMutation: MutationOptions<void, DefaultError, Options<PostApiVbyApiVersionRequestBodyData>> = {
    mutationFn: async (options) => {
        const { data } = await postApiVbyApiVersionRequestBody({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const postApiVbyApiVersionFormDataOptions = (options?: Options<PostApiVbyApiVersionFormDataData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await postApiVbyApiVersionFormData({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'postApiVbyApiVersionFormData'
        }
    ]
}); };

export const postApiVbyApiVersionFormDataMutation: MutationOptions<void, DefaultError, Options<PostApiVbyApiVersionFormDataData>> = {
    mutationFn: async (options) => {
        const { data } = await postApiVbyApiVersionFormData({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const callWithDefaultParametersOptions = (options?: Options<CallWithDefaultParametersData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithDefaultParameters({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'callWithDefaultParameters'
        }
    ]
}); };

export const callWithDefaultOptionalParametersOptions = (options?: Options<CallWithDefaultOptionalParametersData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithDefaultOptionalParameters({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'callWithDefaultOptionalParameters'
        }
    ]
}); };

export const callWithDefaultOptionalParametersMutation: MutationOptions<void, DefaultError, Options<CallWithDefaultOptionalParametersData>> = {
    mutationFn: async (options) => {
        const { data } = await callWithDefaultOptionalParameters({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const callToTestOrderOfParamsMutation: MutationOptions<void, DefaultError, Options<CallToTestOrderOfParamsData>> = {
    mutationFn: async (options) => {
        const { data } = await callToTestOrderOfParams({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const duplicateNameOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await duplicateName({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'duplicateName'
        }
    ]
}); };

export const duplicateName1Options = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await duplicateName1({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'duplicateName1'
        }
    ]
}); };

export const duplicateName1Mutation: MutationOptions<void, DefaultError, Options> = {
    mutationFn: async (options) => {
        const { data } = await duplicateName1({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const duplicateName2Mutation: MutationOptions<void, DefaultError, Options> = {
    mutationFn: async (options) => {
        const { data } = await duplicateName2({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const duplicateName3Mutation: MutationOptions<void, DefaultError, Options> = {
    mutationFn: async (options) => {
        const { data } = await duplicateName3({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const callWithNoContentResponseOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithNoContentResponse({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'callWithNoContentResponse'
        }
    ]
}); };

export const callWithResponseAndNoContentResponseOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithResponseAndNoContentResponse({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'callWithResponseAndNoContentResponse'
        }
    ]
}); };

export const dummyAOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await dummyA({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'dummyA'
        }
    ]
}); };

export const dummyBOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await dummyB({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'dummyB'
        }
    ]
}); };

export const callWithResponseOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithResponse({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'callWithResponse'
        }
    ]
}); };

export const callWithDuplicateResponsesOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithDuplicateResponses({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'callWithDuplicateResponses'
        }
    ]
}); };

export const callWithDuplicateResponsesMutation: MutationOptions<CallWithDuplicateResponsesResponse, CallWithDuplicateResponsesError, Options> = {
    mutationFn: async (options) => {
        const { data } = await callWithDuplicateResponses({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const callWithResponsesMutation: MutationOptions<CallWithResponsesResponse, CallWithResponsesError, Options> = {
    mutationFn: async (options) => {
        const { data } = await callWithResponses({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const collectionFormatOptions = (options: Options<CollectionFormatData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await collectionFormat({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'collectionFormat'
        }
    ]
}); };

export const typesOptions = (options: Options<TypesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await types({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'types'
        }
    ]
}); };

export const uploadFileOptions = (options: Options<UploadFileData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await uploadFile({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'uploadFile'
        }
    ]
}); };

export const uploadFileMutation: MutationOptions<UploadFileResponse, UploadFileError, Options<UploadFileData>> = {
    mutationFn: async (options) => {
        const { data } = await uploadFile({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const fileResponseOptions = (options: Options<FileResponseData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await fileResponse({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'fileResponse'
        }
    ]
}); };

export const complexTypesOptions = (options: Options<ComplexTypesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await complexTypes({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'complexTypes'
        }
    ]
}); };

export const multipartRequestOptions = (options?: Options<MultipartRequestData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await multipartRequest({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'multipartRequest'
        }
    ]
}); };

export const multipartRequestMutation: MutationOptions<void, DefaultError, Options<MultipartRequestData>> = {
    mutationFn: async (options) => {
        const { data } = await multipartRequest({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const multipartResponseOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await multipartResponse({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'multipartResponse'
        }
    ]
}); };

export const complexParamsMutation: MutationOptions<ComplexParamsResponse, ComplexParamsError, Options<ComplexParamsData>> = {
    mutationFn: async (options) => {
        const { data } = await complexParams({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const callWithResultFromHeaderOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await callWithResultFromHeader({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'callWithResultFromHeader'
        }
    ]
}); };

export const callWithResultFromHeaderMutation: MutationOptions<CallWithResultFromHeaderResponse, CallWithResultFromHeaderError, Options> = {
    mutationFn: async (options) => {
        const { data } = await callWithResultFromHeader({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const testErrorCodeOptions = (options: Options<TestErrorCodeData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await testErrorCode({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'testErrorCode'
        }
    ]
}); };

export const testErrorCodeMutation: MutationOptions<TestErrorCodeResponse, TestErrorCodeError, Options<TestErrorCodeData>> = {
    mutationFn: async (options) => {
        const { data } = await testErrorCode({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const nonAsciiæøåÆøÅöôêÊ字符串Options = (options: Options<NonAsciiæøåÆøÅöôêÊ字符串Data>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await nonAsciiæøåÆøÅöôêÊ字符串({
            ...options,
            ...queryKey[0].params,
            throwOnError: true
        });
        return data;
    },
    queryKey: [
        {
            params: createQueryKeyParams(options),
            scope: 'nonAsciiæøåÆøÅöôêÊ字符串'
        }
    ]
}); };

export const nonAsciiæøåÆøÅöôêÊ字符串Mutation: MutationOptions<NonAsciiæøåÆøÅöôêÊ字符串Response, NonAsciiæøåÆøÅöôêÊ字符串Error, Options<NonAsciiæøåÆøÅöôêÊ字符串Data>> = {
    mutationFn: async (options) => {
        const { data } = await nonAsciiæøåÆøÅöôêÊ字符串({
            ...options,
            throwOnError: true
        });
        return data;
    }
};

export const putWithFormUrlEncodedMutation: MutationOptions<void, DefaultError, Options<PutWithFormUrlEncodedData>> = {
    mutationFn: async (options) => {
        const { data } = await putWithFormUrlEncoded({
            ...options,
            throwOnError: true
        });
        return data;
    }
};