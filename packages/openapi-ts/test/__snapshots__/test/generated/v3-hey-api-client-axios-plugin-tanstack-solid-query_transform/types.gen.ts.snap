// This file is auto-generated by @hey-api/openapi-ts

/**
 * This is a model that contains a some dates
 */
export type SimpleModel = {
    id: number;
    name: string;
    readonly enabled: boolean;
};

/**
 * This is a model that contains a some dates
 */
export type ModelWithDates = {
    id: number;
    name: string;
    readonly enabled: boolean;
    readonly modified: Date;
    readonly expires?: Date;
};

/**
 * This is a model that contains a some dates and arrays
 */
export type ParentModelWithDates = {
    id: number;
    readonly modified?: Date;
    items?: Array<ModelWithDates>;
    item?: ModelWithDates;
    simpleItems?: Array<SimpleModel>;
    simpleItem?: SimpleModel;
    dates?: Array<(Date)>;
    strings?: Array<(string)>;
};

export type ParentModelWithDatesResponse = ParentModelWithDates | unknown;

export type ParentModelWithDatesError = unknown;

export type ModelWithDatesResponse = ModelWithDates;

export type ModelWithDatesError = unknown;

export type ModelWithDatesArrayResponse = Array<ModelWithDates>;

export type ModelWithDatesArrayError = unknown;

export type ArrayOfDatesResponse = Array<(Date)>;

export type ArrayOfDatesError = unknown;

export type DateResponse = Date;

export type DateError = unknown;

export type MultipleResponsesResponse = Array<ModelWithDates> | Array<SimpleModel>;

export type MultipleResponsesError = unknown;

export type $OpenApiTs = {
    '/api/model-with-dates': {
        post: {
            res: {
                /**
                 * Success
                 */
                '200': ParentModelWithDates;
                /**
                 * Success
                 */
                '201': unknown;
            };
        };
        put: {
            res: {
                /**
                 * Success
                 */
                '200': ModelWithDates;
            };
        };
    };
    '/api/model-with-dates-array': {
        put: {
            res: {
                /**
                 * Success
                 */
                '200': Array<ModelWithDates>;
            };
        };
    };
    '/api/array-of-dates': {
        put: {
            res: {
                /**
                 * Success
                 */
                '200': Array<(Date)>;
            };
        };
    };
    '/api/date': {
        put: {
            res: {
                /**
                 * Success
                 */
                '200': Date;
            };
        };
    };
    '/api/multiple-responses': {
        put: {
            res: {
                /**
                 * Updated
                 */
                '200': Array<ModelWithDates>;
                /**
                 * Created
                 */
                '201': Array<SimpleModel>;
            };
        };
    };
};

export type ParentModelWithDatesResponseTransformer = (data: any) => Promise<ParentModelWithDatesResponse>;

export type ParentModelWithDatesModelResponseTransformer = (data: any) => ParentModelWithDates;

export type ModelWithDatesModelResponseTransformer = (data: any) => ModelWithDates;

export const ModelWithDatesModelResponseTransformer: ModelWithDatesModelResponseTransformer = data => {
    if (data?.modified) {
        data.modified = new Date(data.modified);
    }
    if (data?.expires) {
        data.expires = new Date(data.expires);
    }
    return data;
};

export const ParentModelWithDatesModelResponseTransformer: ParentModelWithDatesModelResponseTransformer = data => {
    if (data?.modified) {
        data.modified = new Date(data.modified);
    }
    if (Array.isArray(data?.items)) {
        data.items.forEach(ModelWithDatesModelResponseTransformer);
    }
    if (data?.item) {
        ModelWithDatesModelResponseTransformer(data.item);
    }
    if (Array.isArray(data?.dates)) {
        data.dates = data.dates.map(item => new Date(item));
    }
    return data;
};

export const ParentModelWithDatesResponseTransformer: ParentModelWithDatesResponseTransformer = async (data) => {
    if (data) {
        ParentModelWithDatesModelResponseTransformer(data);
    }
    return data;
};

export type ModelWithDatesResponseTransformer = (data: any) => Promise<ModelWithDatesResponse>;

export const ModelWithDatesResponseTransformer: ModelWithDatesResponseTransformer = async (data) => {
    ModelWithDatesModelResponseTransformer(data);
    return data;
};

export type ModelWithDatesArrayResponseTransformer = (data: any) => Promise<ModelWithDatesArrayResponse>;

export const ModelWithDatesArrayResponseTransformer: ModelWithDatesArrayResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(ModelWithDatesModelResponseTransformer);
    }
    return data;
};